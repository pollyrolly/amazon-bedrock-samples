AWSTemplateFormatVersion: 2010-09-09
Description: "CloudFormation Template to deploy an ETL orchestration pipeline by using Redshift Data Api, Step Function and AWS Lambda"
Parameters:
  RedshiftClusterEndpoint:
    Description: Redshift cluster endpoint including port number and database name
    Type: String
    Default: redshift-cluster.xxxxxx.region.redshift.amazonaws.com:5439/dev
  DbUsername:
    Description: Redshift database user name which has access to run SQL Script.
    Type: String
    AllowedPattern: "([a-z])([a-z]|[0-9])*"
    Default: 'awsuser'
  S3BucketNameLocal:
    Type: String
    Description: Name of the S3 bucket to store the SQL scripts
  ScriptPath:
    Type: String
    Description: Path to the SQL script files in the S3 bucket
    Default: 'scripts'
  ResultPath:
    Type: String
    Description: Path to store the results of the Review
    Default: 'results'
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Input Parameters
        Parameters:
          - RedshiftClusterEndpoint
          - DbUsername
          - S3BucketNameLocal
          - ScriptPath
          - ResultPath

Resources:
  StateMachineExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description : IAM Role for the state machine in step function to run
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub 'states.${AWS::Region}.amazonaws.com'
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: RedshiftBatchDataApiPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'redshift-data:BatchExecuteStatement'
                  - 'redshift-data:ListStatements'
                  - 'redshift-data:GetStatementResult'
                  - 'redshift-data:DescribeStatement'
                  - 'redshift-data:ExecuteStatement'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'redshift:GetClusterCredentials'
                Resource:
                  - !Sub 
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:cluster:${SourceRedshiftClusterIdentifier}
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref RedshiftClusterEndpoint]]}
                  - !Sub 
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbname:${SourceRedshiftClusterIdentifier}/${RedshiftDatabaseName}
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref RedshiftClusterEndpoint]],RedshiftDatabaseName: !Select [1, !Split ["/", !Ref RedshiftClusterEndpoint]]}   
                  - !Sub 
                      - arn:aws:redshift:${AWS::Region}:${AWS::AccountId}:dbuser:${SourceRedshiftClusterIdentifier}/${DbUsername}
                      - {SourceRedshiftClusterIdentifier: !Select [0, !Split [".", !Ref RedshiftClusterEndpoint]]}
        - PolicyName: ScriptS3AccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource: 
                  - !Sub
                      - arn:aws:s3:::${S3BucketNameLocal}/*
                      - arn:aws:s3:::${S3BucketNameLocal}/scripts/*
                      - arn:aws:s3:::${S3BucketNameLocal}/results/*
                  - !Sub
                      - arn:aws:s3:::${S3BucketNameLocal}
                      - arn:aws:s3:::${S3BucketNameLocal}/scripts
                      - arn:aws:s3:::${S3BucketNameLocal}/results

  RedshiftReviewStepFunction:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      DefinitionString: !Sub 
        - |-   
          {
            "Comment": "ETL workflow for executing a review query",
            "StartAt": "read_review_query",
            "States": {
              "read_review_query": {
                "Type": "Task",
                "Parameters": {
                  "Bucket": "${S3BucketName}",
                  "Key.$": "$.Task"
                },
                "ResultPath": "$.sql_output",
                "ResultSelector": {
                  "sql_output.$": "$.Body"
                },
                "Resource": "arn:aws:states:::aws-sdk:s3:getObject",
                "Next": "run_review_query"
              },
              "run_review_query": {
                "Type": "Task",
                "Parameters": {
                  "ClusterIdentifier": "${RedshiftClusterIdentifier}",
                  "Database": "${RedshiftDbName}",
                  "Sqls.$": "States.Array($.sql_output.sql_output)",
                  "DbUser": "${RedshiftDbUser}"
                },
                "Resource": "arn:aws:states:::aws-sdk:redshiftdata:batchExecuteStatement",
                "Next": "wait_on_review_query_completion"
              },
              "wait_on_review_query_completion": {
                "Comment": "Wait before status check",
                "Type": "Wait",
                "Seconds": 20,
                "Next": "run_review_query_status_check"
              },
              "run_review_query_status_check": {
                "Comment": "Check Query Status",
                "Type": "Task",
                "Resource": "arn:aws:states:::aws-sdk:redshiftdata:describeStatement",
                "ResultPath": "$.sql_output",
                "Parameters": {
                  "Id.$": "$.sql_output.Id"
                },
                "Next": "is_run_complete"
              },
              "is_run_complete": {
                "Comment": "check if run_review_query step is complete",
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.sql_output.Status",
                    "StringEquals": "FAILED",
                    "Next": "logging_error"
                  },
                  {
                    "Variable": "$.sql_output.Status",
                    "StringEquals": "FINISHED",
                    "Next": "read_query_result"
                  }
                ],
                "Default": "wait_on_review_query_completion"
              },
              "logging_error": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:log-function",
                "Parameters": {
                  "cause": "Failure on Review Query Pipeline",
                  "error": "Error"
                },
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "catcher"
                  }
                ],
                "Next": "review_query_failure"
              },
              "catcher": {
                "Type": "Task",
                "Resource": "arn:aws:states:::lambda:invoke",
                "OutputPath": "$.Payload",
                "Parameters": {
                  "Payload.$": "$",
                  "FunctionName": "catch"
                },
                "Retry": [
                  {
                    "ErrorEquals": [
                      "Lambda.ServiceException",
                      "Lambda.AWSLambdaException",
                      "Lambda.SdkClientException",
                      "Lambda.TooManyRequestsException"
                    ],
                    "IntervalSeconds": 1,
                    "MaxAttempts": 3,
                    "BackoffRate": 2
                  }
                ],
                "Next": "review_query_failure"
              },
              "read_query_result": {
                "Type": "Task",
                "Resource": "arn:aws:states:::aws-sdk:redshiftdata:getStatementResult",
                "Parameters": {
                  "Id.$": "$.sql_output.Id"
                },
                "ResultPath": "$.query_result",
                "Next": "process_query_result"
              },
              "process_query_result": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:process-query-result-lambda",
                "Parameters": {
                  "queryResult.$": "$.query_result.Records"
                },
                "Next": "review_query_success",
                "Catch": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "Next": "catcher"
                  }
                ]
              },
              "review_query_failure": {
                "Type": "Fail",
                "Cause": "Failure on Sales Data Pipeline",
                "Error": "Error"
              },
              "review_query_success": {
                "Type": "Succeed"
              }
            }
          }
        - RedshiftClusterIdentifier: !Select [0, !Split [".", !Ref RedshiftClusterEndpoint]]
          RedshiftDbName: !Select [1, !Split ["/", !Ref RedshiftClusterEndpoint]]
          RedshiftDbUser: !Ref DbUsername
          S3BucketName: !Ref ETLScriptS3Path
          SetupScriptFilename: !FindInMap [Script, Config, SetupScript]
          ValidateScriptFilename: !FindInMap [Script, Config, ValidateScript]       
      RoleArn: !GetAtt StateMachineExecutionRole.Arn

  LambdaInvokeStepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "LambdaInvokeStepFunctionRole-${AWS::AccountId}"
      Description: IAM Role for lambda to execute the Step Function
      AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
      Path: /
      Policies:
          -
            PolicyName: LambdaInvokePolicy
            PolicyDocument :
              Version: 2012-10-17
              Statement:
                -
                  Effect: "Allow"
                  Action:
                    - states:StartExecution
                  Resource: !Ref RedshiftETLStepFunction
          -
            PolicyName: LambdaCloudFormationPolicy
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                -
                  Effect: Allow
                  Action:
                    - s3:*
                  Resource:
                    - !Sub "arn:aws:s3:::cloudformation-custom-resource-response-${AWS::Region}"
                    - !Sub "arn:aws:s3:::cloudformation-waitcondition-${AWS::Region}"
                    - !Sub "arn:aws:s3:::cloudformation-custom-resource-response-${AWS::Region}/*"
                    - !Sub "arn:aws:s3:::cloudformation-waitcondition-${AWS::Region}/*"

  LambdaInvokeStepFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "LambdaInvokeStepFunction-${AWS::AccountId}"
      Description: Lambda to execute the step function
      Handler: index.handler
      Runtime: python3.12
      Role: !GetAtt 'LambdaInvokeStepFunctionRole.Arn'
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import traceback
          import json
          import cfnresponse
          def handler(event, context):
            print(event)
            step_function_client = boto3.client('stepfunctions')
            res = {}
            S3BucketName = event['ResourceProperties'].get('S3BucketNameLocal')
            step_function_input =  {
              "S3BucketName" : "scripts-logger-266726630905-us-west-2",
              "Query" : 
                      "ScriptName" : "scripts/rpr_NodeDetails.sql",
                      "OutputLocation" : "result/node_details.json",,
                      "ErrorLocation"  : "error/",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
              "Workflow": {
                "Dummy": {
                      "ScriptName" : "scripts/rpr_Dummy.sql",
                      "OutputLocation" : "result/dummy.json",,
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "NodeDetails": {
                      "ScriptName" : "scripts/rpr_NodeDetails.sql",
                      "OutputLocation" : "result/node_details.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "QueueHealth": {
                      "ScriptName" : "scripts/rpr_QueueHealth.sql",
                      "OutputLocation" :  "result/queue_health.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "AlterTableRecommendation": {
                      "ScriptName" : "scripts/rpr_AlterTableRecommendation.sql",
                      "OutputLocation" :  "result/alter_table_recommendation.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "SpectrumPerformance": {
                      "ScriptName" : "scripts/rpr_SpectrumPerformance.sql",
                      "OutputLocation" :  "result/spectrum_performance.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "ATOWorkerActions": {
                      "ScriptName" : "rpr_ATOWorkerActions.sql",
                      "OutputLocation" :  "result/ato_worker_actions.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "ConcurrencyScalingUsage": {
                      "ScriptName" : "rpr_ConcurrencyScalingUsage.sql",
                      "OutputLocation" :  "result/concurrency_scaling_usage.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                },
                "CopyPerformance": {
                      "ScriptName" : "rpr_CopyPerformance.sql",
                      "OutputLocation" :  "result/copy_performance.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "DataShareConsumerUsage": {
                      "ScriptName" : "rpr_DataShareConsumerUsage.sql",
                      "OutputLocation" :  "result/data_share_consumer_usage.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "DataShareProducerObject": {
                      "ScriptName" : "rpr_DataShareProducerObject.sql",
                      "OutputLocation" :  "result/data_share_producer_object.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "MaterializedView": {
                      "ScriptName" : "rpr_MaterializedView.sql",
                      "OutputLocation" :  "result/materialized_view.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "TableAlerts": {
                      "ScriptName" : "rpr_TableAlerts.sql",
                      "OutputLocation" :  "result/table_alerts.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "TableInfo":  {
                      "ScriptName" : "rpr_TableInfo.sql",
                      "OutputLocation" :  "result/table_info.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "Top50QueriesByDiskSpill" : {
                      "ScriptName" : "rpr_Top50QueriesByDiskSpill.sql",
                      "OutputLocation" :  "result/top_50_queries_by_disk_spill.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "Top50QueriesByRunTime": {
                      "ScriptName" : "rpr_Top50QueriesByRunTime.sql",
                      "OutputLocation" :  "result/top_50_queries_by_run_time.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      }, 
                "UsagePattern": {
                      "ScriptName" : "rpr_UsagePattern.sql",
                      "OutputLocation" :  "result/usage_pattern.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                    },
                "WaitTimeAndCount": {
                      "ScriptName" : "rpr_WaitTimeAndCount.sql",
                      "OutputLocation" :  "result/wait_time_and_count.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "WLMandCommit": {
                      "ScriptName" : "rpr_WLMandCommit.sql",
                      "OutputLocation" :  "result/wlm_and_commit.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      }, 
                "WLMConfig": {
                      "ScriptName" : "rpr_WLMConfig.sql",
                      "OutputLocation" :  "result/wlm_config.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },
                "WorkloadEvaluation" : {
                      "ScriptName" : "rpr_WorkloadEvaluation.sql",
                      "OutputLocation" :  "result/workload_evaluation.json",
                      "TimeThreshold" : "60",
                      "Status": "INITIAL"
                      },  
                }}
            if event['RequestType'] != 'Delete':
                try:
                    step_function_input = {"comment": "Execute ETL Workflow for Redshift"}
                    response = step_function_client.start_execution(stateMachineArn=event['ResourceProperties'].get('StepFunctionArn'),
                                                                    input=json.dumps(step_function_input)
                                                                  )
                    print(response)
                except:
                    print(traceback.format_exc())
                    cfnresponse.send(event, context, cfnresponse.FAILED, input)
                    raise
            cfnresponse.send(event, context, cfnresponse.SUCCESS, res)

  StartStepFunction:
    Type: Custom::LambdaStartStepFunction
    Properties:
      ServiceToken: !GetAtt [LambdaInvokeStepFunction, Arn]
      StepFunctionArn: !Ref RedshiftETLStepFunction
Outputs:
  RedshiftETLStepFunctionArn:
    Description: "The ARN of the step function used for ETL orchestration"
    Value:
      Ref: RedshiftETLStepFunction

